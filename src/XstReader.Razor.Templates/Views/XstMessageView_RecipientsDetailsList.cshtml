@using XstReader
@using XstReader.App.Common
@using XstReader.ElementProperties
@using XstReader.Razor.Templates

@model XstMessage

@{
    XstMessage Message = Model;
    XstExportOptions Options = RenderOptions.ExportOptions;

    if (!ViewData.ContainsKey("Level"))
        ViewData.Add("Level", 1);

    int level = (ViewData["Level"] as int?) ?? 0;
    if (level == 0) level = 1;

    var recipients = Message?.Recipients?.Items ?? new XstRecipient[0];
    var recipientsTypes = recipients.Select(r => r.RecipientType).Distinct().OrderBy(r => r);
}

@functions
{
    ViewDataDictionary GetDictionary(int innerLevel)
    {
        var dic = new ViewDataDictionary(ViewData);
        dic["Level"] = innerLevel;
        return dic;
    }

}

@* Recipient List *@
@Html.Raw($"<H{level}>Recipients</H{level}>")

@foreach(var recipientType in recipientsTypes)
{
    @foreach(var recipient in recipients.Where(r => r.RecipientType==recipientType))
    {
        <details>
            <summary>
                <b>@recipientType</b>: @recipient.DisplayName
                <i>@("<")<a href="mailto:@recipient.Address">@($"{recipient.Address}")</a>@(">")</i>
            </summary>
            <p>
                <a name="@recipient.GetIdWithType()"></a>
                @{
                    Html.RenderPartial("XstPropertySetView_Properties", recipient.Properties, GetDictionary(level + 1));
                 }
             </p>
        </details>
    }
}

