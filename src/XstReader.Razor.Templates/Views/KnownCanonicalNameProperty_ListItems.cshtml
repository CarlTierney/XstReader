@using XstReader
@using XstReader.App.Common
@using XstReader.ElementProperties
@using XstReader.Razor.Templates

@model IEnumerable<KnownCanonicalNameProperty>

@{
    IEnumerable<KnownCanonicalNameProperty> KnownProperties = Model;
    XstExportOptions Options = RenderOptions.ExportOptions;

    if (!ViewData.ContainsKey("Level"))
        ViewData.Add("Level", 1);

    int level = (ViewData["Level"] as int?) ?? 0;
    if (level == 0) level = 1;
}

@functions
{
    ViewDataDictionary GetDictionary(int innerLevel)
    {
        var dic = new ViewDataDictionary(ViewData);
        dic["Level"] = innerLevel;
        return dic;
    }

}

@* Known Properties *@
@Html.Raw($"<H{level}>Properties</H{level}>")

@foreach(var property in KnownProperties.OrderBy(p=> p.Area.FriendlyName()))
{
    <details>
        <summary>
            <b>@(property.CanonicalName)</b> (@(String.Format("0x{0:x4}", property.Id)))
        </summary>
        <p>
            <a name="Property_@(property.CanonicalName)"></a>
            <p><b>Area:</b> @(property.Area.FriendlyName())</p>
            <p><b>Category:</b> @(property.Category)</p>
            <p><b>Set:</b> @(property.Set.Description()) - {@(property.Set.Guid())}</p>
            @Html.Raw(property.HtmlDescription)
         </p>
    </details>
}